#!/usr/bin/env python3


from litvak.normalize import fieldInfo
from litvak.parsexls import xlsRows
from litvak.birth import processBirth
from litvak.death import processDeath
from litvak.marriage import processMarriage
from litvak.utils import info, fatal
import csv
import argparse


parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="Read one or more LitvakSig spreadsheets, "
    "and output a consolidated normalized CSV file.",
    epilog="""
OUTPUT FIELDS

The output CSV file contains the following fields:

"""
    + "\n".join(
        [
            "{:2d} {:20s} {:s}".format(i + 1, field[0], field[1])
            for i, field in enumerate(fieldInfo)
        ]
    ),
)


parser.add_argument(
    "-o",
    "--output",
    dest="output",
    default="./output/normalized.csv",
    help="The directory where the normalized CSV file will be placed. "
    "[Default: ./output/normalized.csv]",
)
parser.add_argument(
    "-f",
    "--fields",
    dest="fields",
    help="Comma separated list of fields to emit. [Default: all]",
)
parser.add_argument(
    "--places", action="store_true", help="Only emit the normalized 'Places' columns."
)

parser.add_argument(
    "files",
    nargs="*",
    help="XLS spreadsheet files to normalize.",
)
options = parser.parse_args()

fieldnames = [field[0].title() for field in fieldInfo]
extrasaction = "raise"
if options.fields:
    fieldnames = [
        s.strip().title() for s in options.fields.split(",") if s in fieldnames
    ]
    extrasaction = "ignore"

if not fieldnames:
    fatal("No valid field names given.")

with open(options.output, "w", newline="") as f:
    writer = csv.DictWriter(f, fieldnames=fieldnames, extrasaction=extrasaction)
    writer.writeheader()
    for fileName in options.files:
        for row in xlsRows(fileName):
            if row["fileType"] == "Birth":
                rows = processBirth(row)
            elif row["fileType"] == "Death":
                rows = processDeath(row)
            elif row["fileType"] == "Marriage":
                rows = processMarriage(row)
            else:
                continue
            for row in rows:
                writer.writerow(row)

info("Output in: " + options.output)
