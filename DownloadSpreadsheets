#!/usr/bin/env python3

#
# Download spreadsheets from litvaksig.org
#
# Requires a donation that provides a subscription
#
import argparse
import os
import pathlib

from litvak.download import downloadXlsFile, getFileList
from litvak.utils import fatal, info, login

parser = argparse.ArgumentParser(
    description="Download a set of spreadsheets from Litvaksig.org")
parser.add_argument(
    "-u",
    "--username",
    help="Litvaksig.org account username. "
    "[Default: LITVAK_USERNAME environment variable]",
)
parser.add_argument(
    "-p",
    "--password",
    help="Litvaksig.org account password. "
    "[Default: LITVAK_PASSWORD environment variable]",
)
parser.add_argument(
    "-g",
    "--group",
    help="The name of the group in a district you subscribe to. "
    "[Default: suwalki/sejny]",
    default="suwalki/sejny",
)
parser.add_argument(
    "-o",
    "--outdir",
    dest="outdir",
    type=pathlib.Path,
    default="./output",
    help="The directory where the spreadsheets will be placed. "
    "[Default: ./output]",
)
parser.add_argument(
    "-x",
    "--overwrite",
    dest="overwrite",
    action="store_true",
    help="Overwrite existing files. "
    "[Default: false]",
)
parser.add_argument(
    "-n",
    "--dry-run",
    action="store_true",
    dest="dryrun",
    help="Identify the files, but do not download them. "
    "[Default: false]",
)
parser.add_argument(
    "files",
    nargs="*",
    help="Files to download. "
    "[Default: all files in the group]",
)
options = parser.parse_args()

options.username = options.username or os.getenv("LITVAK_USERNAME",
                                                 default=None)
options.password = options.password or os.getenv("LITVAK_PASSWORD",
                                                 default=None)
if not options.username or not options.password:
    fatal("Account username and password are required.")

login(options.username, options.password)
fileList = getFileList(options.group)

if not options.files:
    options.files = fileList.keys()

for f in options.files:
    if f not in fileList:
        info("File is not in group - Skipping: {}".format(f))
        continue
    downloadXlsFile(
        options.outdir,
        options.group,
        fileList[f],
        options.overwrite,
        options.dryrun,
    )
